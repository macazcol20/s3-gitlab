apiVersion: v1
kind: Namespace
metadata:
  name: opr-develop
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: opr-develop
data:
  create_users.sql: |
    DO $$ BEGIN
      IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'project_service') THEN
        CREATE USER project_service WITH ENCRYPTED PASSWORD 'reflect';
      END IF;
    END $$;

    DO $$ BEGIN
      IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ProjectService') THEN
        CREATE DATABASE "ProjectService" WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.utf8' LC_CTYPE = 'en_US.utf8' OWNER project_service;
      END IF;
    END $$;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: opr-develop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:16
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "ProjectService"
        - name: POSTGRES_USER
          value: "project_service"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: project-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-init-scripts
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: opr-develop
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
  - name: postgres
    protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: project
  namespace: opr-develop
spec:
  replicas: 2
  selector:
    matchLabels:
      app: project
  template:
    metadata:
      labels:
        app: project
    spec:
      containers:
      - name: reflect-project
        image: us-east1-docker.pkg.dev/unity-solutions-tyndall-prd/docker/reflect-project:develop-latest
        ports:
        - containerPort: 10010
          name: grpc
        - containerPort: 80
          name: http
        - containerPort: 1234
          name: prom-publisher
        envFrom:
        - configMapRef:
            name: project-config
        - secretRef:
            name: project-secrets
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:10010"]
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:10010"]
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
---
apiVersion: v1
kind: Secret
metadata:
  name: project-secrets
  namespace: opr-develop
type: Opaque
data:
  REFLECTPROJECT_ConnectionStrings__ProjectServiceDatabase: "SG9zdD1wb3N0Z3JlcztEYXRhYmFzZT1Qcm9qZWN0U2VydmljZTtVc2VybmFtZT1wcm9qZWN0X3NlcnZpY2U7UGFzc3dvcmQ9cmVmbGVjdA=="
  postgres-password: cmVmbGVjdA==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: project-config
  namespace: opr-develop
data:
  REFLECT_COMPONENT: project
  REFLECTPROJECT_Prometheus__Enabled: "true"
  REFLECTPROJECT_SyncServer__Cloud__SupportsDecimation: "true"
  REFLECTPROJECT_Security__LicenseValidationStartDate: "2019-11-01T00:00:00Z"
  REFLECT_TESTRUNNER_WAIT: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: project
  namespace: opr-develop
spec:
  type: ClusterIP
  selector:
    app: project
  ports:
  - name: grpc
    protocol: TCP
    port: 10010
    targetPort: 10010
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
  - name: prom-publisher
    protocol: TCP
    port: 1234
    targetPort: 1234
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: opr-develop
data:
  envoy.yaml: |
    admin:
    access_log_path: /tmp/admin_access.log
    address:
      socket_address: { address: 0.0.0.0, port_value: 9901 }

    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address: { address: 0.0.0.0, port_value: 8080 }
          filter_chains:
            - filters:
                - name: envoy.http_connection_manager
                  config:
                    codec_type: auto
                    stat_prefix: ingress_http
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains: ["*"]
                          routes:
                            - match: { prefix: "/" }
                              route:
                                cluster: reflect-project
                                max_grpc_timeout: 0s
                          cors:
                            allow_origin_string_match:
                            - safe_regex:
                                google_re2: {}
                                regex: \*
                            allow_methods: GET, PUT, DELETE, POST, OPTIONS
                            allow_headers: authorization,x-grpc-web,grpc-timeout,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-reflect-appid
                            max_age: "1728000"
                            expose_headers: grpc-status,grpc-message
                    http_filters:
                      - name: envoy.grpc_web
                      - name: envoy.cors
                      - name: envoy.router
      clusters:
        - name: reflect-project
          connect_timeout: 0.25s
          type: logical_dns
          http2_protocol_options: {}
          lb_policy: round_robin
          # For local development on Windows, set `address` to `host.docker.internal` if the Project Server
          # is not running inside Docker
          #hosts: [{ socket_address: { address: host.docker.internal, port_value: 10010 }}]
          hosts: [{ socket_address: { address: $upstream_name, port_value: 10010 }}]

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-proxy
  namespace: opr-develop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy-proxy
  template:
    metadata:
      labels:
        app: envoy-proxy
    spec:
      containers:
      - name: envoy
        image: envoyproxy/envoy:v1.23.0
        ports:
        - containerPort: 9901
          name: admin
        - containerPort: 8080
          name: grpc-web
        - containerPort: 10010
          name: grpc
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
          readOnly: true
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config
---
